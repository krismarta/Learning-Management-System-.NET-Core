// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineCourseAPI.Context;

namespace OnlineCourseAPI.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20211231023212_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineCourseAPI.Model.Account", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Roleid")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Roleid");

                    b.ToTable("tb_m_account");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.BankAccount", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Userid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("bank_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("holder_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("no")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Userid")
                        .IsUnique()
                        .HasFilter("[Userid] IS NOT NULL");

                    b.ToTable("tb_m_bank_account");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("tb_m_category");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.Course", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Categoryid")
                        .HasColumnType("int");

                    b.Property<string>("Userid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Categoryid");

                    b.HasIndex("Userid");

                    b.ToTable("tb_m_course");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.FAQ", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("tb_m_faq");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.MyCourse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Courseid")
                        .HasColumnType("int");

                    b.Property<string>("Userid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("Courseid");

                    b.HasIndex("Userid");

                    b.ToTable("tb_t_mycourse");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.Payment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Courseid")
                        .HasColumnType("int");

                    b.Property<string>("Userid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date_accept")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date_request")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Courseid");

                    b.HasIndex("Userid");

                    b.ToTable("tb_t_payment");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.PaymentMidtrans", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Courseid")
                        .HasColumnType("int");

                    b.Property<string>("Userid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Courseid");

                    b.HasIndex("Userid");

                    b.ToTable("tb_t_payment_midtrans");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.ReviewCourse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Courseid")
                        .HasColumnType("int");

                    b.Property<string>("Userid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date_review")
                        .HasColumnType("datetime2");

                    b.Property<int>("rate")
                        .HasColumnType("int");

                    b.Property<string>("review")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Courseid");

                    b.HasIndex("Userid");

                    b.ToTable("tb_m_review_course");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("tb_m_role");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.SubCourse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Courseid")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Courseid");

                    b.ToTable("tb_m_sub_course");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.SubCourseLog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MyCourseid")
                        .HasColumnType("int");

                    b.Property<int?>("SubCourseid")
                        .HasColumnType("int");

                    b.Property<DateTime>("date_finished")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("MyCourseid");

                    b.HasIndex("SubCourseid");

                    b.ToTable("tb_m_sub_course_log");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("tb_m_user");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.UserNumber", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("id");

                    b.ToTable("tb_t_user_number");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.Account", b =>
                {
                    b.HasOne("OnlineCourseAPI.Model.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCourseAPI.Model.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("OnlineCourseAPI.Model.Account", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.BankAccount", b =>
                {
                    b.HasOne("OnlineCourseAPI.Model.User", "User")
                        .WithOne("BankAccount")
                        .HasForeignKey("OnlineCourseAPI.Model.BankAccount", "Userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.Course", b =>
                {
                    b.HasOne("OnlineCourseAPI.Model.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("Categoryid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCourseAPI.Model.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("Userid");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.MyCourse", b =>
                {
                    b.HasOne("OnlineCourseAPI.Model.Course", "Course")
                        .WithMany("MyCourses")
                        .HasForeignKey("Courseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCourseAPI.Model.User", "User")
                        .WithMany("MyCourses")
                        .HasForeignKey("Userid");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.Payment", b =>
                {
                    b.HasOne("OnlineCourseAPI.Model.Course", "Course")
                        .WithMany("Payments")
                        .HasForeignKey("Courseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCourseAPI.Model.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("Userid");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.PaymentMidtrans", b =>
                {
                    b.HasOne("OnlineCourseAPI.Model.Course", "Course")
                        .WithMany("PaymentMidtranses")
                        .HasForeignKey("Courseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCourseAPI.Model.User", "User")
                        .WithMany("PaymentMidtranses")
                        .HasForeignKey("Userid");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.ReviewCourse", b =>
                {
                    b.HasOne("OnlineCourseAPI.Model.Course", "Course")
                        .WithMany("ReviewCourses")
                        .HasForeignKey("Courseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCourseAPI.Model.User", "User")
                        .WithMany("ReviewCourses")
                        .HasForeignKey("Userid");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.SubCourse", b =>
                {
                    b.HasOne("OnlineCourseAPI.Model.Course", "Course")
                        .WithMany("SubCourses")
                        .HasForeignKey("Courseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.SubCourseLog", b =>
                {
                    b.HasOne("OnlineCourseAPI.Model.MyCourse", "MyCourse")
                        .WithMany("SubCourseLogs")
                        .HasForeignKey("MyCourseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineCourseAPI.Model.SubCourse", null)
                        .WithMany("SubCourseLogs")
                        .HasForeignKey("SubCourseid");

                    b.Navigation("MyCourse");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.Course", b =>
                {
                    b.Navigation("MyCourses");

                    b.Navigation("PaymentMidtranses");

                    b.Navigation("Payments");

                    b.Navigation("ReviewCourses");

                    b.Navigation("SubCourses");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.MyCourse", b =>
                {
                    b.Navigation("SubCourseLogs");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.SubCourse", b =>
                {
                    b.Navigation("SubCourseLogs");
                });

            modelBuilder.Entity("OnlineCourseAPI.Model.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("BankAccount");

                    b.Navigation("Courses");

                    b.Navigation("MyCourses");

                    b.Navigation("PaymentMidtranses");

                    b.Navigation("Payments");

                    b.Navigation("ReviewCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
